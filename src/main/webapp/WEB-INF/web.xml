<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--声明，注册springmvc的核心对象DispatcherServlet
servlet的初始化会执行init（）方法，DispatcherServlet在init（）中
{
  //创建容器，读取配置文件
  WebApplicationContext ctx=new ClassPathXmlApplicationContext("springmvc.xml");
  //把容器对象放入到ServletContext中
  getServletContext（）.setAttribute(key,ctx)



  启动tomcat报错，读取这个文件 /WEB-INF/myweb-servlet.xml
  springmvc创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
-->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--自定义springmvc读取的配置文件位置-->
        <init-param>
            <!--springmvc的配置文件位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--自定义文件的位置   (在resources文件夹下）-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>


        <!--在tomcat启动后，创建Servlet对象
         load-on-startup:表示Tomcat启动后创建对象的顺序。
         它的值是整数，数值越小，tomcat创建对象的时间就越早（大约等于0的整数）
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>






    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <!--使用框两种方式
         1.使用扩展名的方式，语法*.xxx,xxx是自定义的名字，
         常用的方式：*.do,*.action,*.mvc等等
          例如：http://localhost:8080/myweb/some.do

         2.使用斜杠"/"

        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>